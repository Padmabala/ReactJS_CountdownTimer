{"version":3,"sources":["component/timer.js","component/App.js","serviceWorker.js","index.js"],"names":["Countdown","state","days","parseInt","props","hours","mins","secs","msg","console","log","this","setInterval","setState","Component","App","flag","startCountdown","resetTimer","setFieldValue","event","field","target","name","value","className","type","onClick","placeholder","onChange","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49794e4a.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Countdown extends Component{\r\n    state={\r\n        days:parseInt(this.props.days),\r\n        hours:parseInt(this.props.hours),\r\n        mins:parseInt(this.props.mins),\r\n        secs:parseInt(this.props.secs),\r\n        msg:\"\"\r\n    }\r\n    componentDidMount(){\r\n    console.log(\"heyyy\",this.state);\r\n        \r\n          setInterval(()=>{\r\n            if(this.state.days===0 && this.state.hours===0 && this.state.mins===0 && this.state.secs===0){\r\n              this.setState({\r\n                msg:\"Countdown Complete\"\r\n              })\r\n            } \r\n            else{      \r\n          this.setState({\r\n            secs:this.state.secs-1\r\n          });\r\n              if(this.state.secs<0){\r\n                this.setState({\r\n                  secs:59\r\n                })\r\n            \r\n              \r\n              if(this.state.secs===59){\r\n                this.setState({\r\n                  mins:this.state.mins>0?this.state.mins-1:59\r\n                })\r\n                if(this.state.mins===59){\r\n                  this.setState({\r\n                    hours:this.state.hours>0?this.state.hours-1:23\r\n                  })\r\n                  if(this.state.hours===23){\r\n                    this.setState({\r\n                      days:this.state.days-1,\r\n                    })\r\n                  }\r\n                }\r\n                }\r\n              }      \r\n          }\r\n      \r\n          },1000)\r\n    }\r\nrender(){\r\n    const {days,hours,mins,secs,msg}=this.state;\r\n    return(\r\n        <div>\r\n            <h1>\r\n          {days}:{hours}:{mins}:{secs}\r\n          </h1>\r\n          <p>{msg}</p>\r\n        </div>\r\n    );\r\n    }\r\n}\r\nCountdown.propTypes={\r\n    days:PropTypes.number,\r\n    hours:PropTypes.number,\r\n    mins:PropTypes.number,\r\n    secs:PropTypes.number\r\n};\r\nexport default Countdown;","import React from 'react';\nimport './App.css';\nimport Countdown from './timer';\n\n\n\nclass App extends React.Component{\n  state={\n    days:\"\",\n    hours:\"\",\n    mins:\"\",\n    secs:\"\",\n    flag:false,\n    msg:\"\"\n  }\n  componentDidMount(){\n    \n  }\n  startCountdown=()=>{\n    if(this.state.days===\"\" || this.state.hours===\"\" || this.state.mins===\"\" || this.state.secs===\"\"){\n      this.setState({\n        msg:\"Please provide all the values to start the Timer\"\n      })\n    }\n    else{\n    this.setState({\n      flag:true\n    })\n  }\n  }\n  resetTimer=()=>{\n    this.setState({\n      flag:false,\n      days:\"\",\n      hours:\"\",\n      mins:\"\",\n      secs:\"\"\n    })\n  }\n  setFieldValue=(event)=>{\n    const field=event.target.name\n    this.setState({\n      [field]:event.target.value\n    })\n  }\n  render(){\n    const {days,hours,mins,secs,flag,msg}=this.state;\n    return(\n      <>\n      <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          \n          flag\n          ?\n          <>\n          <Countdown days={days} hours={hours} mins={mins} secs={secs}></Countdown>\n          <p><button type=\"button\" onClick={this.resetTimer}>Reset Timer</button></p>\n          </>\n          :\n          <>\n        <table>\n          <tr>\n            <td>\n            Days:\n            </td>\n            <td>\n            <input name=\"days\" type=\"text\" placeholder=\"Enter Days countdown\" onChange={this.setFieldValue} value={days}/>\n            </td>\n          </tr>\n          <tr>\n            <td>\n            Hours:\n            </td>\n            <td>\n            <input name=\"hours\" type=\"text\" placeholder=\"Enter between 1-24\" onChange={this.setFieldValue} value={hours}/>\n            </td>\n          </tr>\n          <tr>\n            <td>\n            Minutes:\n            </td>\n            <td>\n            <input name=\"mins\" type=\"text\" placeholder=\"Enter between 1-60\" onChange={this.setFieldValue} value={mins}/>\n            </td>\n          </tr>\n          <tr>\n            <td>\n            Seconds:\n            </td>\n            <td>\n            <input name=\"secs\" placeholder=\"Enter between 1-60\" onChange={this.setFieldValue} value={secs}/>\n            </td>\n          </tr>\n        </table>\n        <p><button type=\"button\" onClick={this.startCountdown}>Start Countdown </button></p>\n        <p>{msg}</p>\n        </>\n  }\n      </header>\n        \n    </div>\n    </>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}